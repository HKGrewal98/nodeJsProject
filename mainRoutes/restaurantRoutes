const {express,passport} = require('../ServerConfig/server')
const db = require('../model/databaseFunctions')
const {check,validationResult } = require('express-validator')
const app = express.Router()
const path = require('path')
const jwt = require('jsonwebtoken')
require('dotenv').config({path:path.join(__dirname,'../.env')})
const initializePassport = require("../ServerConfig/passport")
 initializePassport(passport)


function authenticateToken(req,res,next){
         
   console.log("JWT ENABLED : " + process.env.ENABLE_JWT) 
    if(process.env.ENABLE_JWT === 'false'){
          return next()
    }

     const token = req.headers['access_token']
     const username = req.headers['username']
    
     if(token == null){
      return res.status(401).json({status:"FAILURE",message:"Jwt Token missing in the request."})
     }
      
      jwt.verify(token,process.env.ACCESS_TOKEN_SECRET,(err,user)=> {
           if(err){
            return res.status(403).json({status:"FAILURE",message:"Jwt Token is wrong or expired."})
           }
          
           if(user.name != username){
            return res.status(403).json({status:"FAILURE",message:"Jwt Token assigned to another user."})
           }

           req.user = user
           next()
      })

}

function checkAuthenticated(req,res,next){
       if(req.isAuthenticated()){
         return next()
       }

       res.redirect("/api/restaurants/login")
}


function checkNotAuthenticated(req,res,next){
  if(req.isAuthenticated()){
       return res.redirect("/api/restaurants")
  }
       next()
}


app.get('/',checkAuthenticated,(req,res)=>{
  console.log("Session Information.")
  console.log(req.user)
  console.log("Session")
  console.log(req.session)
  res.render('index',{name:req.user.name})
})

app.get('/login',checkNotAuthenticated,(req,res)=>{
  res.render('login')
})

app.post('/login',checkNotAuthenticated,passport.authenticate('local',{
  successRedirect : '/api/restaurants/all',
  failureRedirect : '/api/restaurants/login',
  failureFlash : true
}))   

app.get('/register',checkNotAuthenticated,(req,res)=>{
  res.render('register')
})

app.post('/register',checkNotAuthenticated,(req,res)=>{
    db.saveUser(req.body,res)
})


app.delete('/logout',(req,res)=>{
  req.logout(function(err) {
    if (err) { return res.redirect("/api/restaurants") }
    res.redirect("/api/restaurants/login")
  })
})


app.post('/v1/login',(req,res)=>{
  
  const {username} = req.body
  const accessToken = jwt.sign({name:username},process.env.ACCESS_TOKEN_SECRET,{expiresIn:process.env.JWT_EXPIRES_IN})
  res.json({status:"SUCCESS",access_token:accessToken})  

})

app.post('/',[authenticateToken,checkAuthenticated],[
check('borough').notEmpty().isString(),
check('cuisine').notEmpty().isString(),
check('name').notEmpty().isString(),
check('restaurant_id').notEmpty().isString(),
check('grades').notEmpty().isArray(),
check('address').notEmpty().isObject(),
],(req,res)=>{

          const errors = validationResult(req) 
          if(!errors.isEmpty()){
            return res.status(400).json(errors.array())
          }

          return db.addNewRestaurant(req.body,res)          
})

app.put('/:id',[authenticateToken,checkAuthenticated],(req,res)=>{

        const errors = validationResult(req) 
        if(!errors.isEmpty()){
          return res.json(errors.array())
        }
      
        return db.updateRestaurantById(req.params.id,req.body,res)
    
})


app.get('/all',[authenticateToken,checkAuthenticated],(req,res)=>{
  
    var {page,perPage,borough} = req.query
    if(!page  || page == '/'){
        page=1
    }
    if(!perPage || perPage=='/'){
        perPage=process.env.DEFAULT_PAGE_SIZE
    }
    if(!borough || borough=='/'){
      borough=null
  }
   
    console.log("Page : " + page + " perPage : " + perPage + " borugh : "  + borough)
  
    return db.getAllRestaurants(parseInt(page),parseInt(perPage),borough,res,null) 
})

app.get('/search',[authenticateToken,checkAuthenticated],(req,res)=>{
    let {id} = req.query
    return db.getRestaurantById(id,res)
 })

app.delete('/delete',[authenticateToken,checkAuthenticated],(req,res)=>{
    let {id} = req.body
    return db.deleteRestaurantById(id,res)
  })

app.all('*',(req,res)=>{
  res.status(404).json({message:"Sorry! This Endpoint does not exist."})
})  
  
module.exports = app